# Copyright (C) 2015 Gan Quan <coin2028@hotmail.com>
#
# This program is free software; you can redistribute  it and/or modify it
# under  the terms of  the GNU General  Public License as published by the
# Free Software Foundation;  either version 2 of the  License, or (at your
# option) any later version.

# Makefile for MIPS64

######## BEGIN CONFIG ########

# Cross-platform toolchain prefix.
# E.g. if
# 	CROSS_COMPILE = mips64-linux-gnu-
# then the cross-compiler should be
# 	mips64-linux-gnu-gcc
# The linker should be
# 	mips64-linux-gnu-ld
# etc.
CROSS_COMPILE	=  mips64-linux-gnu-

# Machine name.
MACH		=  loongson3a

# Target device for kernel & bootloader installation.
# 
# IMPORTANT:
# Make sure you select the correct device, or your own hard disk may become
# corrupted!
# I hadn't write the backup mechanism for kernel installation yet, but one
# can recover MBR in case of accidents.  Refer to boot/Makefile.mips64 for
# more information.
INSTALLDEV	=  /dev/sdb

CCOMPILER	=  gcc

# Only needed if the installation needs sudo privileges
SUDO		=  sudo

# The partition number.  DO NOT CHANGE THIS.
PARTNO		=  2
########  END  CONFIG ########

# Retrieve root directory.
# The expression $(shell <command>) executes the shell command and returns
# the output.
ROOTDIR		=  $(shell pwd)

# Capitalize $MACH
UPPERMACH	=  $(shell echo $(MACH) | tr a-z- A-Z_)

CC		=  $(CROSS_COMPILE)$(CCOMPILER)
CPP		=  $(CROSS_COMPILE)cpp
LD		=  $(CROSS_COMPILE)ld
OBJCOPY		=  $(CROSS_COMPILE)objcopy
OBJDUMP		=  $(CROSS_COMPILE)objdump

INCFLAG		=  -I$(ROOTDIR) -I$(ROOTDIR)/include
INCFLAG		+= -I$(ROOTDIR)/include/arch/$(ARCH)

CFLAGS		=  -O2 -G 0 -mno-abicalls -fno-pic -Wall -mabi=64 -fno-builtin
CFLAGS		+= -nostdinc -nostdlib -g -mips64r2 -EL $(INCFLAG)
CFLAGS		+= -DMACH_$(UPPERMACH)

LDSCRIPT	=  kern/arch/$(ARCH)/ldscript.ld
LDFLAGS		=  -EL -N

OBJS		=  kern/arch/$(ARCH)/start.o \
		   kern/init/stub.o \
		   drivers/serial/uart16550.o \
		   drivers/serial/uart.o \
		   drivers/serial/uart-printf.o \
		   lib/libc/stdio/snprintf.o \
		   lib/libc/string/memset.o

BINARY		=  bootstrap
DISASSEMBLY	=  $(BINARY).s

export

all: elf boot

elf: $(OBJS)
	$(LD) $(LDFLAGS) -T $(LDSCRIPT) -o $(BINARY) $(OBJS)
	$(OBJDUMP) -S $(BINARY) >$(DISASSEMBLY)

boot: elf
	cd boot && make -f Makefile.$(ARCH)

install: all
	cd boot && make -f Makefile.$(ARCH) install
	$(SUDO) ./tools/arch/$(ARCH)/$(MACH)/install-kernel.pl \
		$(INSTALLDEV) $(BINARY) $(PARTNO)

clean:
	cd boot && make -f Makefile.$(ARCH) clean
	rm -rf $(OBJS) $(BINARY)

uninstall:
	cd $(INSTALLDIR) && rm -rf $(BINARY)

.S.o:
	$(CC) $(CFLAGS) -c $< -o $*.o
